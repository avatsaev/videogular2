{"version":3,"file":"controls.umd.min.js","sources":["../../../../../../node_modules/src/util/tryCatch.ts","../../../../../../node_modules/src/Subscription.ts","../../../../../../node_modules/src/util/pipe.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/states/vg-states.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/services/vg-api.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/services/vg-utils.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/services/vg-fullscreen-api.ts","../../../../../../node_modules/src/util/isArray.ts","../../../../../../node_modules/src/util/isNumeric.ts","../../../../../../node_modules/src/util/root.ts","../../../../../../node_modules/src/util/isFunction.ts","../../../../../../node_modules/src/util/isObject.ts","../../../../../../node_modules/src/util/errorObject.ts","../../../../../../node_modules/src/util/UnsubscriptionError.ts","../../../../../../node_modules/src/Observer.ts","../../../../../../node_modules/src/symbol/rxSubscriber.ts","../../../../../../node_modules/src/Subscriber.ts","../../../../../../node_modules/src/util/toSubscriber.ts","../../../../../../node_modules/src/symbol/observable.ts","../../../../../../node_modules/src/util/noop.ts","../../../../../../node_modules/src/Observable.ts","../../../../../../node_modules/src/scheduler/Action.ts","../../../../../../node_modules/src/scheduler/AsyncAction.ts","../../../../../../node_modules/src/Scheduler.ts","../../../../../../node_modules/src/scheduler/async.ts","../../../../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../../../../node_modules/src/util/isScheduler.ts","../../../../../../node_modules/src/util/isDate.ts","../../../../../../node_modules/src/observable/TimerObservable.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/events/vg-events.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/vg-media/vg-media.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/services/vg-controls-hidden.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/vg-player/vg-player.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/vg-cue-points/vg-cue-points.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/core.module.ts","../../../../../build/core/dist/@videogular/~/@videogular/core/src/public_api.ts","~/@videogular/controls/src/vg-controls.ts","~/@videogular/controls/src/vg-fullscreen/vg-fullscreen.ts","~/@videogular/controls/src/vg-mute/vg-mute.ts","~/@videogular/controls/src/vg-volume/vg-volume.ts","~/@videogular/controls/src/vg-play-pause/vg-play-pause.ts","~/@videogular/controls/src/vg-playback-button/vg-playback-button.ts","~/@videogular/controls/src/vg-scrub-bar/vg-scrub-bar.ts","~/@videogular/controls/src/vg-scrub-bar/vg-scrub-bar-buffering-time/vg-scrub-bar-buffering-time.ts","~/@videogular/controls/src/vg-scrub-bar/vg-scrub-bar-cue-points/vg-scrub-bar-cue-points.ts","~/@videogular/controls/src/vg-scrub-bar/vg-scrub-bar-current-time/vg-scrub-bar-current-time.ts","~/@videogular/controls/src/vg-time-display/vg-time-display.ts","~/@videogular/controls/src/vg-track-selector/vg-track-selector.ts","~/@videogular/controls/src/controls.module.ts"],"sourcesContent":["import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class VgStates {\n    static VG_ENDED: string = 'ended';\n    static VG_PAUSED: string = 'paused';\n    static VG_PLAYING: string = 'playing';\n    static VG_LOADING: string = 'waiting';\n}\n","import {Injectable, EventEmitter} from '@angular/core';\nimport {IPlayable} from \"../vg-media/i-playable\";\nimport {VgStates} from \"../states/vg-states\";\nimport { VgFullscreenAPI } from './vg-fullscreen-api';\n\n@Injectable()\nexport class VgAPI {\n    medias:Object = {};// TODO: refactor to Set<IPlayable> \n    videogularElement: any;\n    playerReadyEvent: EventEmitter<any> = new EventEmitter(true);\n    isPlayerReady: boolean = false;\n    fsAPI: VgFullscreenAPI;\n\n    constructor() {\n\n    }\n\n    onPlayerReady(fsAPI: VgFullscreenAPI) {\n        this.fsAPI = fsAPI;\n        this.isPlayerReady = true;\n        this.playerReadyEvent.emit(this);\n    }\n\n    getDefaultMedia():IPlayable {\n        for (let item in this.medias) {\n            if (this.medias[item]) {\n                return this.medias[item];\n            }\n        }\n    }\n\n    getMasterMedia():IPlayable {\n        let master:any;\n        for (let id in this.medias) {\n            if (this.medias[id].vgMedia === 'true' || this.medias[id].vgMedia === true) {\n                master = this.medias[id];\n                break;\n            }\n        }\n        return master || this.getDefaultMedia();\n    }\n\n    isMasterDefined():boolean {\n        let result = false;\n        for (let id in this.medias) {\n            if (this.medias[id].vgMedia === 'true' || this.medias[id].vgMedia === true) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }\n\n    getMediaById(id:string = null):IPlayable {\n        let media = this.medias[id];\n\n        if (!id || id === '*') {\n            media = this;\n        }\n\n        return media;\n    }\n\n    play() {\n        for (let id in this.medias) {\n            if (this.medias[id]) {\n                this.medias[ id ].play();\n            }\n        }\n    }\n\n    pause() {\n        for (let id in this.medias) {\n            if (this.medias[id]) {\n                this.medias[id].pause();\n            }\n        }\n    }\n\n    get duration() {\n        return this.$$getAllProperties('duration');\n    }\n\n    set currentTime(seconds) {\n        this.$$setAllProperties('currentTime', seconds);\n    }\n\n    get currentTime() {\n        return this.$$getAllProperties('currentTime');\n    }\n\n    set state(state) {\n        this.$$setAllProperties('state', state);\n    }\n\n    get state() {\n        return this.$$getAllProperties('state');\n    }\n\n    set volume(volume) {\n        this.$$setAllProperties('volume', volume);\n    }\n\n    get volume() {\n        return this.$$getAllProperties('volume');\n    }\n\n    set playbackRate(rate) {\n        this.$$setAllProperties('playbackRate', rate);\n    }\n\n    get playbackRate() {\n        return this.$$getAllProperties('playbackRate');\n    }\n\n    get canPlay() {\n        return this.$$getAllProperties('canPlay');\n    }\n\n    get canPlayThrough() {\n        return this.$$getAllProperties('canPlayThrough');\n    }\n\n    get isMetadataLoaded() {\n        return this.$$getAllProperties('isMetadataLoaded');\n    }\n\n    get isWaiting() {\n        return this.$$getAllProperties('isWaiting');\n    }\n\n    get isCompleted() {\n        return this.$$getAllProperties('isCompleted');\n    }\n\n    get isLive() {\n        return this.$$getAllProperties('isLive');\n    }\n\n    get isMaster() {\n        return this.$$getAllProperties('isMaster');\n    }\n\n    get time() {\n        return this.$$getAllProperties('time');\n    }\n\n    get buffer() {\n        return this.$$getAllProperties('buffer');\n    }\n\n    get buffered() {\n        return this.$$getAllProperties('buffered');\n    }\n\n    get subscriptions() {\n        return this.$$getAllProperties('subscriptions');\n    }\n\n    get textTracks() {\n        return this.$$getAllProperties('textTracks');\n    }\n\n    seekTime(value:number, byPercent:boolean = false) {\n        for (let id in this.medias) {\n            if (this.medias[id]) {\n                this.$$seek(this.medias[ id ], value, byPercent);\n            }\n        }\n    }\n\n    $$seek(media:IPlayable, value:number, byPercent:boolean = false) {\n        let second:number;\n        let duration:number = media.duration;\n\n        if (byPercent) {\n            if (this.isMasterDefined()) {\n                duration = this.getMasterMedia().duration;\n            }\n\n            second = value * duration / 100;\n        }\n        else {\n            second = value;\n        }\n\n        media.currentTime = second;\n    }\n\n    addTextTrack(type:string, label?:string, language?:string) {\n        for (let id in this.medias) {\n            if (this.medias[id]) {\n                this.$$addTextTrack(this.medias[ id ], type, label, language);\n            }\n        }\n    }\n    $$addTextTrack(media:IPlayable, type:string, label?:string, language?:string) {\n        media.addTextTrack(type, label, language);\n    }\n\n    $$getAllProperties(property:string){\n        const medias = {};\n        let result:any;\n\n        for (let id in this.medias) {\n            if (this.medias[id]) {\n                medias[ id ] = this.medias[ id ];\n            }\n        }\n\n        const nMedias = Object.keys(medias).length;\n        switch (nMedias) {\n            case 0:\n                // Return default values until vgMedia is initialized\n                switch (property) {\n                    case 'state':\n                        result = VgStates.VG_PAUSED;\n                        break;\n\n                    case 'playbackRate':\n                    case 'volume':\n                        result = 1;\n                        break;\n\n                    case 'time':\n                        result = {current: 0, total: 0, left: 0};\n                        break;\n                }\n                break;\n\n            case 1:\n                // If there's only one media element then return the plain value\n                const firstMediaId = Object.keys(medias)[0];\n                result = medias[firstMediaId][property];\n                break;\n                \n            default:\n                // TODO: return 'master' value\n                let master = this.getMasterMedia();\n                result = medias[master.id][property];\n        }\n        \n        return result;\n    }\n\n    $$setAllProperties(property:string, value:any){\n        for (let id in this.medias) {\n            if (this.medias[id]) {\n                this.medias[ id ][ property ] = value;\n            }\n        }\n    }\n\n    registerElement(elem:HTMLElement) {\n        this.videogularElement = elem;\n    }\n\n    registerMedia(media:IPlayable) {\n        this.medias[media.id] = media;\n    }\n\n    unregisterMedia(media:IPlayable) {\n        delete this.medias[media.id];\n    }\n\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class VgUtils {\n    /**\n     * Inspired by Paul Irish\n     * https://gist.github.com/paulirish/211209\n     * @returns {number}\n     */\n    static getZIndex():number {\n        let zIndex = 1;\n        let elementZIndex:number;\n\n        let tags = document.getElementsByTagName('*');\n\n        for (let i = 0, l = tags.length; i < l; i++) {\n            elementZIndex = parseInt(window.getComputedStyle(tags[i])[\"z-index\"], 10);\n\n            if (elementZIndex > zIndex) {\n                zIndex = elementZIndex + 1;\n            }\n        }\n\n        return zIndex;\n    }\n\n    // Very simple mobile detection, not 100% reliable\n    static isMobileDevice() {\n        return (typeof window.orientation !== \"undefined\") || (navigator.userAgent.indexOf(\"IEMobile\") !== -1);\n    };\n\n    static isiOSDevice() {\n        return (navigator.userAgent.match(/ip(hone|ad|od)/i) && !navigator.userAgent.match(/(iemobile)[\\/\\s]?([\\w\\.]*)/i));\n    };\n\n    static isCordova() {\n        return document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1;\n    };\n}\n","import { EventEmitter, Injectable, QueryList } from '@angular/core';\nimport { VgUtils } from './vg-utils';\nimport { VgMedia } from '../vg-media/vg-media';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class VgFullscreenAPI {\n    polyfill: any;\n    onchange: string;\n    onerror: string;\n    nativeFullscreen: boolean = true;\n    isFullscreen: boolean = false;\n    isAvailable: boolean;\n    videogularElement: HTMLElement;\n    medias: QueryList<VgMedia>;\n\n    fsChangeSubscription: Subscription;\n    onChangeFullscreen: EventEmitter<any> = new EventEmitter();\n\n    constructor() {\n    }\n\n    init(elem: HTMLElement, medias: QueryList<VgMedia>) {\n        this.videogularElement = elem;\n        this.medias = medias;\n\n        const APIs = {\n            w3: {\n                enabled: 'fullscreenEnabled',\n                element: 'fullscreenElement',\n                request: 'requestFullscreen',\n                exit: 'exitFullscreen',\n                onchange: 'fullscreenchange',\n                onerror: 'fullscreenerror'\n            },\n            newWebkit: {\n                enabled: 'webkitFullscreenEnabled',\n                element: 'webkitFullscreenElement',\n                request: 'webkitRequestFullscreen',\n                exit: 'webkitExitFullscreen',\n                onchange: 'webkitfullscreenchange',\n                onerror: 'webkitfullscreenerror'\n            },\n            oldWebkit: {\n                enabled: 'webkitIsFullScreen',\n                element: 'webkitCurrentFullScreenElement',\n                request: 'webkitRequestFullScreen',\n                exit: 'webkitCancelFullScreen',\n                onchange: 'webkitfullscreenchange',\n                onerror: 'webkitfullscreenerror'\n            },\n            moz: {\n                enabled: 'mozFullScreen',\n                element: 'mozFullScreenElement',\n                request: 'mozRequestFullScreen',\n                exit: 'mozCancelFullScreen',\n                onchange: 'mozfullscreenchange',\n                onerror: 'mozfullscreenerror'\n            },\n            ios: {\n                enabled: 'webkitFullscreenEnabled',\n                element: 'webkitFullscreenElement',\n                request: 'webkitEnterFullscreen',\n                exit: 'webkitExitFullscreen',\n                onchange: 'webkitendfullscreen', // Hack for iOS: webkitfullscreenchange it's not firing\n                onerror: 'webkitfullscreenerror'\n            },\n            ms: {\n                enabled: 'msFullscreenEnabled',\n                element: 'msFullscreenElement',\n                request: 'msRequestFullscreen',\n                exit: 'msExitFullscreen',\n                onchange: 'MSFullscreenChange',\n                onerror: 'MSFullscreenError'\n            }\n        };\n\n        for (let browser in APIs) {\n            if (APIs[ browser ].enabled in document) {\n                this.polyfill = APIs[ browser ];\n                break;\n            }\n        }\n\n        if (VgUtils.isiOSDevice()) {\n            this.polyfill = APIs.ios\n        }\n\n        this.isAvailable = (this.polyfill != null);\n\n        if (this.polyfill == null) {\n            return;\n        }\n\n        let fsElemDispatcher;\n\n        switch (this.polyfill.onchange) {\n            // Mozilla dispatches the fullscreen change event from document, not the element\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=724816#c3\n            case 'mozfullscreenchange':\n                fsElemDispatcher = document;\n                break;\n\n            // iOS dispatches the fullscreen change event from video element\n            case 'webkitendfullscreen':\n                fsElemDispatcher = this.medias.toArray()[ 0 ].elem;\n                break;\n\n            // HTML5 implementation dispatches the fullscreen change event from the element\n            default:\n                fsElemDispatcher = elem;\n        }\n\n        this.fsChangeSubscription = Observable.fromEvent(fsElemDispatcher, this.polyfill.onchange).subscribe(() => {\n            this.onFullscreenChange();\n        });\n    }\n\n    onFullscreenChange() {\n        this.isFullscreen = !!document[ this.polyfill.element ];\n        this.onChangeFullscreen.next(this.isFullscreen);\n    }\n\n    toggleFullscreen(element: any = null) {\n        if (this.isFullscreen) {\n            this.exit();\n        }\n        else {\n            this.request(element);\n        }\n    }\n\n    request(elem: any) {\n        if (!elem) {\n            elem = this.videogularElement;\n        }\n\n        this.isFullscreen = true;\n        this.onChangeFullscreen.next(true);\n\n        // Perform native full screen support\n        if (this.isAvailable && this.nativeFullscreen) {\n            // Fullscreen for mobile devices\n            if (VgUtils.isMobileDevice()) {\n                // We should make fullscreen the video object if it doesn't have native fullscreen support\n                // Fallback! We can't set vg-player on fullscreen, only video/audio objects\n                if ((!this.polyfill.enabled && elem === this.videogularElement) || VgUtils.isiOSDevice()) {\n                    elem = this.medias.toArray()[ 0 ].elem;\n                }\n\n                this.enterElementInFullScreen(elem);\n            }\n            else {\n                this.enterElementInFullScreen(this.videogularElement);\n            }\n        }\n    }\n\n    enterElementInFullScreen(elem: any) {\n        elem[ this.polyfill.request ]();\n    }\n\n    exit() {\n        this.isFullscreen = false;\n        this.onChangeFullscreen.next(false);\n\n        // Exit from native fullscreen\n        if (this.isAvailable && this.nativeFullscreen) {\n            document[ this.polyfill.exit ]();\n        }\n    }\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class VgEvents {\n    static VG_ABORT: string = 'abort';\n    static VG_CAN_PLAY: string = 'canplay';\n    static VG_CAN_PLAY_THROUGH: string = 'canplaythrough';\n    static VG_DURATION_CHANGE: string = 'durationchange';\n    static VG_EMPTIED: string = 'emptied';\n    static VG_ENCRYPTED: string = 'encrypted';\n    static VG_ENDED: string = 'ended';\n    static VG_ERROR: string = 'error';\n    static VG_LOADED_DATA: string = 'loadeddata';\n    static VG_LOADED_METADATA: string = 'loadedmetadata';\n    static VG_LOAD_START: string = 'loadstart';\n    static VG_PAUSE: string = 'pause';\n    static VG_PLAY: string = 'play';\n    static VG_PLAYING: string = 'playing';\n    static VG_PROGRESS: string = 'progress';\n    static VG_RATE_CHANGE: string = 'ratechange';\n    static VG_SEEK: string = 'seek';\n    static VG_SEEKED: string = 'seeked';\n    static VG_SEEKING: string = 'seeking';\n    static VG_STALLED: string = 'stalled';\n    static VG_SUSPEND: string = 'suspend';\n    static VG_TIME_UPDATE: string = 'timeupdate';\n    static VG_VOLUME_CHANGE: string = 'volumechange';\n    static VG_WAITING: string = 'waiting';\n    \n    static VG_LOAD: string = 'load';\n    static VG_ENTER: string = 'enter';\n    static VG_EXIT: string = 'exit';\n\n    static VG_START_ADS: string = 'startads';\n    static VG_END_ADS: string = 'endads';\n}\n","import { ChangeDetectorRef, ElementRef, OnInit, Directive, Input, OnDestroy } from \"@angular/core\";\nimport { IPlayable, IMediaSubscriptions } from \"./i-playable\";\nimport { Observable } from \"rxjs/Observable\";\nimport { TimerObservable } from \"rxjs/observable/TimerObservable\";\nimport { Subscription } from \"rxjs/Subscription\";\nimport { Observer } from \"rxjs/Observer\";\nimport { VgStates } from '../states/vg-states';\nimport { VgAPI } from '../services/vg-api';\nimport { VgEvents } from '../events/vg-events';\nimport { Subject } from 'rxjs/Subject';\n\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/combineLatest';\n\n@Directive({\n    selector: '[vgMedia]'\n})\nexport class VgMedia implements OnInit, OnDestroy, IPlayable {\n    elem: any;\n\n    @Input() vgMedia: any;\n    @Input() vgMaster: boolean;\n\n    state: string = VgStates.VG_PAUSED;\n\n    time: any = { current: 0, total: 0, left: 0 };\n    buffer: any = { end: 0 };\n    subscriptions: IMediaSubscriptions | any;\n\n    canPlay: boolean = false;\n    canPlayThrough: boolean = false;\n    isBufferDetected: boolean = false;\n    isMetadataLoaded: boolean = false;\n    isReadyToPlay: boolean = false;\n    isWaiting: boolean = false;\n    isCompleted: boolean = false;\n    isLive: boolean = false;\n\n\n    checkInterval: number = 200;\n    currentPlayPos: number = 0;\n    lastPlayPos: number = 0;\n\n    checkBufferSubscription: any;\n    syncSubscription: Subscription;\n    canPlayAllSubscription: any;\n    playAtferSync: boolean = false;\n\n    mutationObs: Subscription;\n    canPlayObs: Subscription;\n    canPlayThroughObs: Subscription;\n    loadedMetadataObs: Subscription;\n    waitingObs: Subscription;\n    progressObs: Subscription;\n    endedObs: Subscription;\n    playingObs: Subscription;\n    playObs: Subscription;\n    pauseObs: Subscription;\n    timeUpdateObs: Subscription;\n    volumeChangeObs: Subscription;\n    errorObs: Subscription;\n\n    bufferDetected: Subject<boolean> = new Subject();\n\n    playPromise: Promise<any>;\n\n    constructor(private api: VgAPI, private ref: ChangeDetectorRef) {\n\n    }\n\n    ngOnInit() {\n        if (this.vgMedia.nodeName) {\n            // It's a native element\n            this.elem = this.vgMedia;\n        } else {\n            // It's an Angular Class\n            this.elem = this.vgMedia.elem;\n        }\n\n        // Just in case we're creating this vgMedia dynamically register again into API\n        this.api.registerMedia(this);\n\n        this.subscriptions = {\n            // Native events\n            abort: Observable.fromEvent(<any>this.elem, VgEvents.VG_ABORT),\n            canPlay: Observable.fromEvent(<any>this.elem, VgEvents.VG_CAN_PLAY),\n            canPlayThrough: Observable.fromEvent(<any>this.elem, VgEvents.VG_CAN_PLAY_THROUGH),\n            durationChange: Observable.fromEvent(<any>this.elem, VgEvents.VG_DURATION_CHANGE),\n            emptied: Observable.fromEvent(<any>this.elem, VgEvents.VG_EMPTIED),\n            encrypted: Observable.fromEvent(<any>this.elem, VgEvents.VG_ENCRYPTED),\n            ended: Observable.fromEvent(<any>this.elem, VgEvents.VG_ENDED),\n            error: Observable.fromEvent(<any>this.elem, VgEvents.VG_ERROR),\n            loadedData: Observable.fromEvent(<any>this.elem, VgEvents.VG_LOADED_DATA),\n            loadedMetadata: Observable.fromEvent(<any>this.elem, VgEvents.VG_LOADED_METADATA),\n            loadStart: Observable.fromEvent(<any>this.elem, VgEvents.VG_LOAD_START),\n            pause: Observable.fromEvent(<any>this.elem, VgEvents.VG_PAUSE),\n            play: Observable.fromEvent(<any>this.elem, VgEvents.VG_PLAY),\n            playing: Observable.fromEvent(<any>this.elem, VgEvents.VG_PLAYING),\n            progress: Observable.fromEvent(<any>this.elem, VgEvents.VG_PROGRESS),\n            rateChange: Observable.fromEvent(<any>this.elem, VgEvents.VG_RATE_CHANGE),\n            seeked: Observable.fromEvent(<any>this.elem, VgEvents.VG_SEEKED),\n            seeking: Observable.fromEvent(<any>this.elem, VgEvents.VG_SEEKING),\n            stalled: Observable.fromEvent(<any>this.elem, VgEvents.VG_STALLED),\n            suspend: Observable.fromEvent(<any>this.elem, VgEvents.VG_SUSPEND),\n            timeUpdate: Observable.fromEvent(<any>this.elem, VgEvents.VG_TIME_UPDATE),\n            volumeChange: Observable.fromEvent(<any>this.elem, VgEvents.VG_VOLUME_CHANGE),\n            waiting: Observable.fromEvent(<any>this.elem, VgEvents.VG_WAITING),\n\n            // Advertisement only events\n            startAds: Observable.fromEvent(<any>window, VgEvents.VG_START_ADS),\n            endAds: Observable.fromEvent(<any>window, VgEvents.VG_END_ADS),\n\n            // See changes on <source> child elements to reload the video file\n            mutation: Observable.create(\n                (observer: any) => {\n\n                    let domObs = new MutationObserver((mutations) => {\n                        observer.next(mutations);\n                    });\n\n                    domObs.observe(<any>this.elem, { childList: true, attributes: true });\n\n                    return () => {\n                        domObs.disconnect();\n                    };\n                }\n            ),\n\n            // Custom buffering detection\n            bufferDetected: this.bufferDetected\n        };\n\n        this.mutationObs = this.subscriptions.mutation.subscribe(this.onMutation.bind(this));\n        this.canPlayObs = this.subscriptions.canPlay.subscribe(this.onCanPlay.bind(this));\n        this.canPlayThroughObs = this.subscriptions.canPlayThrough.subscribe(this.onCanPlayThrough.bind(this));\n        this.loadedMetadataObs = this.subscriptions.loadedMetadata.subscribe(this.onLoadMetadata.bind(this));\n        this.waitingObs = this.subscriptions.waiting.subscribe(this.onWait.bind(this));\n        this.progressObs = this.subscriptions.progress.subscribe(this.onProgress.bind(this));\n        this.endedObs = this.subscriptions.ended.subscribe(this.onComplete.bind(this));\n        this.playingObs = this.subscriptions.playing.subscribe(this.onStartPlaying.bind(this));\n        this.playObs = this.subscriptions.play.subscribe(this.onPlay.bind(this));\n        this.pauseObs = this.subscriptions.pause.subscribe(this.onPause.bind(this));\n        this.timeUpdateObs = this.subscriptions.timeUpdate.subscribe(this.onTimeUpdate.bind(this));\n        this.volumeChangeObs = this.subscriptions.volumeChange.subscribe(this.onVolumeChange.bind(this));\n        this.errorObs = this.subscriptions.error.subscribe(this.onError.bind(this));\n\n        if (this.vgMaster) {\n            this.api.playerReadyEvent.subscribe(\n                () => {\n                    this.prepareSync();\n                }\n            );\n        }\n    }\n\n    prepareSync() {\n        let canPlayAll: Array<Observable<any>> = [];\n\n        for (let media in this.api.medias) {\n            if (this.api.medias[ media ]) {\n                canPlayAll.push(this.api.medias[ media ].subscriptions.canPlay);\n            }\n        }\n\n        this.canPlayAllSubscription = Observable.combineLatest(canPlayAll,\n            (...params) => {\n                let allReady: boolean = params.some(event => event.target.readyState === 4);\n\n                if (allReady && !this.syncSubscription) {\n                    this.startSync();\n                    this.syncSubscription.unsubscribe();\n                }\n            }\n        ).subscribe();\n    }\n\n    startSync() {\n        this.syncSubscription = TimerObservable.create(0, 1000).subscribe(\n            () => {\n                for (let media in this.api.medias) {\n                    if (this.api.medias[ media ] !== this) {\n                        let diff: number = this.api.medias[ media ].currentTime - this.currentTime;\n\n                        if (diff < -0.3 || diff > 0.3) {\n                            this.playAtferSync = (this.state === VgStates.VG_PLAYING);\n\n                            this.pause();\n                            this.api.medias[ media ].pause();\n                            this.api.medias[ media ].currentTime = this.currentTime;\n                        }\n                        else {\n                            if (this.playAtferSync) {\n                                this.play();\n                                this.api.medias[ media ].play();\n                                this.playAtferSync = false;\n                            }\n                        }\n                    }\n                }\n            }\n        );\n    }\n\n    onMutation(mutations: Array<MutationRecord>) {\n        // Detect changes only for source elements or src attribute\n        for (let i=0, l=mutations.length; i<l; i++) {\n            let mut: MutationRecord = mutations[i];\n\n            if (mut.type === 'attributes' && mut.attributeName === 'src') {\n                // Only load src file if it's not a blob (for DASH / HLS sources)\n                if (mut.target['src'] && mut.target['src'].length > 0 && mut.target['src'].indexOf('blob:') < 0) {\n                    this.loadMedia();\n                    break;\n                }\n            } else if (mut.type === 'childList' && mut.removedNodes.length && mut.removedNodes[0].nodeName.toLowerCase() === 'source') {\n                this.loadMedia();\n                break;\n            }\n        }\n    }\n\n    loadMedia() {\n        this.vgMedia.pause();\n        this.vgMedia.currentTime = 0;\n\n        // Start buffering until we can play the media file\n        this.stopBufferCheck();\n        this.isBufferDetected = true;\n        this.bufferDetected.next(this.isBufferDetected);\n\n        // TODO: This is ugly, we should find something cleaner. For some reason a TimerObservable doesn't works.\n        setTimeout(() => this.vgMedia.load(), 10);\n    }\n\n    play() {\n        // short-circuit if already playing\n        if (this.playPromise || (this.state !== VgStates.VG_PAUSED && this.state !== VgStates.VG_ENDED)) {\n            return;\n        }\n\n        this.playPromise = this.vgMedia.play();\n\n        // browser has async play promise\n        if (this.playPromise && this.playPromise.then && this.playPromise.catch) {\n            this.playPromise\n                .then(() => {\n                    this.playPromise = null;\n                })\n                .catch(() => {\n                    // deliberately empty for the sake of eating console noise\n                });\n        }\n    }\n\n    pause() {\n        // browser has async play promise\n        if (this.playPromise) {\n            this.playPromise\n                .then(() => {\n                    this.vgMedia.pause();\n                });\n        }\n        else {\n            this.vgMedia.pause();\n        }\n    }\n\n    get id() {\n        // We should return undefined if vgMedia still doesn't exist\n        let result = undefined;\n\n        if (this.vgMedia) {\n            result = this.vgMedia.id;\n        }\n\n        return result;\n    }\n\n    get duration() {\n        return this.vgMedia.duration;\n    }\n\n    set currentTime(seconds) {\n        this.vgMedia.currentTime = seconds;\n        // this.elem.dispatchEvent(new CustomEvent(VgEvents.VG_SEEK));\n    }\n\n    get currentTime() {\n        return this.vgMedia.currentTime;\n    }\n\n    set volume(volume) {\n        this.vgMedia.volume = volume;\n    }\n\n    get volume() {\n        return this.vgMedia.volume;\n    }\n\n    set playbackRate(rate) {\n        this.vgMedia.playbackRate = rate;\n    }\n\n    get playbackRate() {\n        return this.vgMedia.playbackRate;\n    }\n\n    get buffered() {\n        return this.vgMedia.buffered;\n    }\n\n    get textTracks() {\n        return this.vgMedia.textTracks;\n    }\n\n    onCanPlay(event: any) {\n        this.isBufferDetected = false;\n        this.bufferDetected.next(this.isBufferDetected);\n        this.canPlay = true;\n        this.ref.detectChanges();\n    }\n\n    onCanPlayThrough(event: any) {\n        this.isBufferDetected = false;\n        this.bufferDetected.next(this.isBufferDetected);\n        this.canPlayThrough = true;\n        this.ref.detectChanges();\n    }\n\n    onLoadMetadata(event: any) {\n        this.isMetadataLoaded = true;\n\n        this.time = {\n            current: 0,\n            left: 0,\n            total: this.duration * 1000\n        };\n\n        this.state = VgStates.VG_PAUSED;\n\n        // Live streaming check\n        let t:number = Math.round(this.time.total);\n        this.isLive = (t === Infinity);\n        this.ref.detectChanges();\n    }\n\n    onWait(event: any) {\n        this.isWaiting = true;\n        this.ref.detectChanges();\n    }\n\n    onComplete(event: any) {\n        this.isCompleted = true;\n        this.state = VgStates.VG_ENDED;\n        this.ref.detectChanges();\n    }\n\n    onStartPlaying(event: any) {\n        this.state = VgStates.VG_PLAYING;\n        this.ref.detectChanges();\n    }\n\n    onPlay(event: any) {\n        this.state = VgStates.VG_PLAYING;\n\n        if (this.vgMaster) {\n            if (!this.syncSubscription || this.syncSubscription.closed) {\n                this.startSync();\n            }\n        }\n\n        this.startBufferCheck();\n        this.ref.detectChanges();\n    }\n\n    onPause(event: any) {\n        this.state = VgStates.VG_PAUSED;\n\n        if (this.vgMaster) {\n            if (!this.playAtferSync) {\n                this.syncSubscription.unsubscribe();\n            }\n        }\n\n        this.stopBufferCheck();\n        this.ref.detectChanges();\n    }\n\n    onTimeUpdate(event: any) {\n        let end = this.buffered.length - 1;\n\n        this.time = {\n            current: this.currentTime * 1000,\n            total: this.time.total,\n            left: (this.duration - this.currentTime) * 1000\n        };\n\n        if (end >= 0) {\n            this.buffer = { end: this.buffered.end(end) * 1000 };\n        }\n        this.ref.detectChanges();\n    }\n\n    onProgress(event: any) {\n        let end = this.buffered.length - 1;\n\n        if (end >= 0) {\n            this.buffer = { end: this.buffered.end(end) * 1000 };\n        }\n        this.ref.detectChanges();\n    }\n\n    onVolumeChange(event: any) {\n        // TODO: Save to localstorage the current volume\n        this.ref.detectChanges();\n    }\n\n    onError(event: any) {\n        // TODO: Handle error messages\n        this.ref.detectChanges();\n    }\n\n    // http://stackoverflow.com/a/23828241/779529\n    bufferCheck() {\n        const offset = 1 / this.checkInterval;\n        this.currentPlayPos = this.currentTime;\n\n        if (!this.isBufferDetected && this.currentPlayPos < (this.lastPlayPos + offset)) {\n            this.isBufferDetected = true;\n        }\n\n        if (this.isBufferDetected && this.currentPlayPos > (this.lastPlayPos + offset)) {\n            this.isBufferDetected = false;\n        }\n\n        // Prevent calls to bufferCheck after ngOnDestroy have been called\n        if (!this.bufferDetected.closed) {\n            this.bufferDetected.next(this.isBufferDetected);\n        }\n\n        this.lastPlayPos = this.currentPlayPos;\n    }\n\n    startBufferCheck() {\n        this.checkBufferSubscription = TimerObservable.create(0, this.checkInterval).subscribe(\n            () => {\n                this.bufferCheck();\n            }\n        );\n    }\n\n    stopBufferCheck() {\n        if (this.checkBufferSubscription) {\n            this.checkBufferSubscription.unsubscribe();\n        }\n\n        this.isBufferDetected = false;\n\n        this.bufferDetected.next(this.isBufferDetected);\n    }\n\n    seekTime(value:number, byPercent:boolean = false) {\n        let second:number;\n        let duration:number = this.duration;\n\n        if (byPercent) {\n            second = value * duration / 100;\n        }\n        else {\n            second = value;\n        }\n\n        this.currentTime = second;\n    }\n\n    addTextTrack(type:string, label?:string, language?:string, mode?:'disabled' | 'hidden' | 'showing'): TextTrack {\n        const newTrack:TextTrack = this.vgMedia.addTextTrack(type, label, language);\n\n        if (mode) {\n            newTrack.mode = mode;\n        }\n        return newTrack;\n    }\n\n    ngOnDestroy() {\n        this.vgMedia.src = '';\n        this.mutationObs.unsubscribe();\n        this.canPlayObs.unsubscribe();\n        this.canPlayThroughObs.unsubscribe();\n        this.loadedMetadataObs.unsubscribe();\n        this.waitingObs.unsubscribe();\n        this.progressObs.unsubscribe();\n        this.endedObs.unsubscribe();\n        this.playingObs.unsubscribe();\n        this.playObs.unsubscribe();\n        this.pauseObs.unsubscribe();\n        this.timeUpdateObs.unsubscribe();\n        this.volumeChangeObs.unsubscribe();\n        this.errorObs.unsubscribe();\n        \n        if (this.checkBufferSubscription) {\n            this.checkBufferSubscription.unsubscribe();\n        }\n\n        if(this.syncSubscription) {\n            this.syncSubscription.unsubscribe();\n        }\n        \n        this.bufferDetected.complete();\n        this.bufferDetected.unsubscribe();\n\n        this.api.unregisterMedia(this);\n    }\n}\n","import { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class VgControlsHidden {\n    isHidden: Observable<boolean>;\n\n    private isHiddenSubject: Subject<boolean> = new Subject<boolean>();\n\n    constructor() {\n        this.isHidden = this.isHiddenSubject.asObservable();\n    }\n\n    state(hidden: boolean) {\n        this.isHiddenSubject.next(hidden);\n    }\n}\n","import {\n    Output,\n    Component,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    QueryList,\n    AfterContentInit,\n    ContentChildren, ViewEncapsulation, OnDestroy\n} from '@angular/core';\nimport { VgAPI } from '../services/vg-api';\nimport { VgFullscreenAPI } from '../services/vg-fullscreen-api';\nimport { VgUtils } from '../services/vg-utils';\nimport { VgMedia } from '../vg-media/vg-media';\nimport { Subscription } from 'rxjs/Subscription';\nimport { VgControlsHidden } from '../services/vg-controls-hidden';\n\n@Component({\n    selector: 'vg-player',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n      <ng-content></ng-content>\n    `,\n    styles: [`\n      vg-player {\n        font-family: 'videogular';\n        position: relative;\n        display: flex;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        background-color: black; }\n        vg-player.fullscreen {\n          position: fixed;\n          left: 0;\n          top: 0; }\n        vg-player.native-fullscreen.controls-hidden {\n          cursor: none; }\n    `],\n    providers: [ VgAPI, VgFullscreenAPI, VgControlsHidden ]\n})\nexport class VgPlayer implements AfterContentInit, OnDestroy {\n    elem: HTMLElement;\n\n    @HostBinding('class.fullscreen') isFullscreen: boolean = false;\n    @HostBinding('class.native-fullscreen') isNativeFullscreen: boolean = false;\n    @HostBinding('class.controls-hidden') areControlsHidden: boolean = false;\n    @HostBinding('style.z-index') zIndex: string;\n\n    @Output()\n    onPlayerReady: EventEmitter<any> = new EventEmitter();\n\n    @Output()\n    onMediaReady: EventEmitter<any> = new EventEmitter();\n\n    @ContentChildren(VgMedia)\n    medias: QueryList<VgMedia>;\n\n    subscriptions: Subscription[] = [];\n\n    constructor(ref: ElementRef, public api: VgAPI, public fsAPI: VgFullscreenAPI, private controlsHidden: VgControlsHidden) {\n        this.elem = ref.nativeElement;\n\n        this.api.registerElement(this.elem);\n    }\n\n    ngAfterContentInit() {\n        this.medias.toArray().forEach((media) => {\n            this.api.registerMedia(media);\n        });\n\n        this.fsAPI.init(this.elem, this.medias);\n\n        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));\n        this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));\n\n        this.api.onPlayerReady(this.fsAPI);\n        this.onPlayerReady.next(this.api);\n    }\n\n    onChangeFullscreen(fsState: boolean) {\n        if (!this.fsAPI.nativeFullscreen) {\n            this.isFullscreen = fsState;\n            this.zIndex = fsState ? VgUtils.getZIndex().toString() : 'auto';\n        } else {\n            this.isNativeFullscreen = fsState;\n        }\n    }\n\n    onHideControls(hidden: boolean) {\n        this.areControlsHidden = hidden;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { Directive, ElementRef, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { VgEvents } from '../events/vg-events';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromEvent';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[vgCuePoints]'\n})\nexport class VgCuePoints implements OnInit, OnDestroy {\n    @Output('onEnterCuePoint') onEnterCuePoint: EventEmitter<any> = new EventEmitter();\n    @Output('onUpdateCuePoint') onUpdateCuePoint: EventEmitter<any> = new EventEmitter();\n    @Output('onExitCuePoint') onExitCuePoint: EventEmitter<any> = new EventEmitter();\n    @Output('onCompleteCuePoint') onCompleteCuePoint: EventEmitter<any> = new EventEmitter();\n\n    subscriptions: Subscription[] = [];\n    cuesSubscriptions: Subscription[] = [];\n\n    totalCues = 0;\n\n    constructor(public ref: ElementRef) {\n    }\n\n    ngOnInit() {\n        let onLoad = Observable.fromEvent(this.ref.nativeElement, VgEvents.VG_LOAD);\n        this.subscriptions.push(onLoad.subscribe(this.onLoad.bind(this)));\n    }\n\n    onLoad(event: any) {\n        let cues: TextTrackCue[] = event.target.track.cues;\n\n        this.ref.nativeElement.cues = cues;\n\n        this.updateCuePoints(cues);\n    }\n\n    updateCuePoints(cues: TextTrackCue[]) {\n        this.cuesSubscriptions.forEach(s => s.unsubscribe());\n\n        for (let i = 0, l = cues.length; i < l; i++) {\n            let onEnter = Observable.fromEvent(cues[ i ], VgEvents.VG_ENTER);\n            this.cuesSubscriptions.push(onEnter.subscribe(this.onEnter.bind(this)));\n\n            let onExit = Observable.fromEvent(cues[ i ], VgEvents.VG_EXIT);\n            this.cuesSubscriptions.push(onExit.subscribe(this.onExit.bind(this)));\n        }\n    }\n\n    onEnter(event: any) {\n        this.onEnterCuePoint.next(event.target);\n    }\n\n    onExit(event: any) {\n        this.onExitCuePoint.next(event.target);\n    }\n\n    ngDoCheck() {\n        if (this.ref.nativeElement.cues) {\n            const changes = this.totalCues !== this.ref.nativeElement.track.cues.length;\n\n            if (changes) {\n                this.totalCues = this.ref.nativeElement.track.cues.length;\n                this.ref.nativeElement.cues = this.ref.nativeElement.track.cues;\n                this.updateCuePoints(this.ref.nativeElement.track.cues);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { VgPlayer } from './vg-player/vg-player';\nimport { VgMedia } from './vg-media/vg-media';\nimport { VgCuePoints } from './vg-cue-points/vg-cue-points';\nimport { VgAPI } from './services/vg-api';\nimport { VgFullscreenAPI } from './services/vg-fullscreen-api';\nimport { VgUtils } from './services/vg-utils';\nimport { VgControlsHidden } from './services/vg-controls-hidden';\n\n// components\nexport * from './vg-player/vg-player';\nexport * from './vg-media/vg-media';\nexport * from './vg-cue-points/vg-cue-points';\n\n// services\nexport * from './services/vg-api';\nexport * from './services/vg-fullscreen-api';\nexport * from './services/vg-utils';\nexport * from './services/vg-controls-hidden';\n\n// types\nexport * from './events/vg-events';\nexport * from './states/vg-states';\n\nconst CORE_DECLARATIONS = [\n    VgPlayer, VgMedia, VgCuePoints\n];\n\n@NgModule({\n    imports: [ CommonModule ],\n    declarations: [ CORE_DECLARATIONS ],\n    exports: [ CORE_DECLARATIONS ],\n    providers: [ VgAPI, VgFullscreenAPI, VgUtils, VgControlsHidden ]\n})\nexport class VgCoreModule {\n}\n","export * from './core.module';\n\n// CustomEvent polyfill for IE9/10/11\n(function () {\n\n    if ( typeof window === \"undefined\" || typeof window['CustomEvent'] === \"function\" ) return false;\n\n    function CustomEvent ( event, params ) {\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window['Event'].prototype;\n\n    window['CustomEvent'] = CustomEvent;\n})();\n","import { AfterViewInit, Component, ElementRef, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { VgAPI, VgControlsHidden, VgStates } from '@videogular/core';\nimport 'rxjs/add/observable/fromEvent';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'vg-controls',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <ng-content></ng-content>`,\n    styles: [ `\n        vg-controls {\n            position: absolute;\n            display: flex;\n            width: 100%;\n            height: 50px;\n            z-index: 300;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            -webkit-transition: bottom 1s;\n            -khtml-transition: bottom 1s;\n            -moz-transition: bottom 1s;\n            -ms-transition: bottom 1s;\n            transition: bottom 1s;\n        }\n\n        vg-controls.hide {\n            bottom: -50px;\n        }\n    ` ]\n})\nexport class VgControls implements OnInit, AfterViewInit {\n    elem: HTMLElement;\n    target: any;\n\n    @HostBinding('style.pointer-events') isAdsPlaying: string = 'initial';\n    @HostBinding('class.hide') hideControls: boolean = false;\n\n    @Input() vgFor: string;\n    @Input() vgAutohide: boolean = false;\n    @Input() vgAutohideTime: number = 3;\n\n    private timer: any;\n    private hideTimer: any;\n\n    subscriptions: Subscription[] = [];\n\n    constructor(private API: VgAPI, private ref: ElementRef, private hidden: VgControlsHidden) {\n        this.elem = ref.nativeElement;\n    }\n\n    ngOnInit() {\n        let mouseMove = Observable.fromEvent(this.API.videogularElement, 'mousemove');\n        this.subscriptions.push(mouseMove.subscribe(this.show.bind(this)));\n\n        let touchStart = Observable.fromEvent(this.API.videogularElement, 'touchstart');\n        this.subscriptions.push(touchStart.subscribe(this.show.bind(this)));\n\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n\n        this.subscriptions.push(this.target.subscriptions.play.subscribe(this.onPlay.bind(this)));\n        this.subscriptions.push(this.target.subscriptions.pause.subscribe(this.onPause.bind(this)));\n        this.subscriptions.push(this.target.subscriptions.startAds.subscribe(this.onStartAds.bind(this)));\n        this.subscriptions.push(this.target.subscriptions.endAds.subscribe(this.onEndAds.bind(this)));\n    }\n\n    ngAfterViewInit() {\n        if (this.vgAutohide) {\n            this.hide();\n        }\n        else {\n            this.show();\n        }\n    }\n\n    onPlay() {\n        if (this.vgAutohide) {\n            this.hide();\n        }\n    }\n\n    onPause() {\n        clearTimeout(this.timer);\n        this.hideControls = false;\n        this.hidden.state(false);\n    }\n\n    onStartAds() {\n        this.isAdsPlaying = 'none';\n    }\n\n    onEndAds() {\n        this.isAdsPlaying = 'initial';\n    }\n\n    hide() {\n        if (this.vgAutohide) {\n            clearTimeout(this.timer);\n            this.hideAsync();\n        }\n    }\n\n    show() {\n        clearTimeout(this.timer);\n        this.hideControls = false;\n        this.hidden.state(false);\n\n        if (this.vgAutohide) {\n            this.hideAsync();\n        }\n    }\n\n    private hideAsync() {\n        if (this.API.state === VgStates.VG_PLAYING) {\n            this.timer = setTimeout(() => {\n                this.hideControls = true;\n                this.hidden.state(true);\n            }, this.vgAutohideTime * 1000);\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { Component, ElementRef, HostListener, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { VgAPI } from '@videogular/core';\nimport { VgFullscreenAPI } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n\n@Component({\n    selector: 'vg-fullscreen',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div class=\"icon\"\n             [class.vg-icon-fullscreen]=\"!isFullscreen\"\n             [class.vg-icon-fullscreen_exit]=\"isFullscreen\"\n             tabindex=\"0\"\n             role=\"button\"\n             aria-label=\"fullscreen button\"\n             [attr.aria-valuetext]=\"ariaValue\">\n        </div>`,\n    styles: [ `\n        vg-fullscreen {\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -khtml-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            height: 50px;\n            width: 50px;\n            cursor: pointer;\n            color: white;\n            line-height: 50px;\n        }\n\n        vg-fullscreen .icon {\n            pointer-events: none;\n        }\n    ` ]\n})\nexport class VgFullscreen implements OnInit, OnDestroy {\n    elem: HTMLElement;\n    vgFor: string;\n    target: Object;\n    isFullscreen: boolean = false;\n\n    subscriptions: Subscription[] = [];\n\n    ariaValue = 'normal mode';\n\n    constructor(ref: ElementRef, public API: VgAPI, public fsAPI: VgFullscreenAPI) {\n        this.elem = ref.nativeElement;\n        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n    }\n\n    onChangeFullscreen(fsState: boolean) {\n        this.ariaValue = fsState ? 'fullscren mode' : 'normal mode';\n        this.isFullscreen = fsState;\n    }\n\n    @HostListener('click')\n    onClick() {\n        this.changeFullscreenState();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        // On press Enter (13) or Space (32)\n        if (event.keyCode === 13 || event.keyCode === 32) {\n            event.preventDefault();\n            this.changeFullscreenState();\n        }\n    }\n\n    changeFullscreenState() {\n        let element = this.target;\n\n        if (this.target instanceof VgAPI) {\n            element = null;\n        }\n\n        this.fsAPI.toggleFullscreen(element);\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { Component, ElementRef, HostListener, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { VgAPI } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n\n@Component({\n    selector: 'vg-mute',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div class=\"icon\"\n             [class.vg-icon-volume_up]=\"getVolume() >= 0.75\"\n             [class.vg-icon-volume_down]=\"getVolume() >= 0.25 && getVolume() < 0.75\"\n             [class.vg-icon-volume_mute]=\"getVolume() > 0 && getVolume() < 0.25\"\n             [class.vg-icon-volume_off]=\"getVolume() === 0\"\n             tabindex=\"0\"\n             role=\"button\"\n             aria-label=\"mute button\"\n             [attr.aria-valuetext]=\"ariaValue\">\n        </div>`,\n    styles: [ `\n        vg-mute {\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -khtml-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            height: 50px;\n            width: 50px;\n            cursor: pointer;\n            color: white;\n            line-height: 50px;\n        }\n\n        vg-mute .icon {\n            pointer-events: none;\n        }\n    ` ]\n})\nexport class VgMute implements OnInit, OnDestroy {\n    @Input() vgFor: string;\n    elem: HTMLElement;\n    target: any;\n\n    currentVolume: number;\n\n    subscriptions: Subscription[] = [];\n\n    ariaValue = 'unmuted';\n\n    constructor(ref: ElementRef, public API: VgAPI) {\n        this.elem = ref.nativeElement;\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n        this.currentVolume = this.target.volume;\n    }\n\n    @HostListener('click')\n    onClick() {\n        this.changeMuteState();\n    }\n\n    @HostListener('keydown', [ '$event' ])\n    onKeyDown(event: KeyboardEvent) {\n        // On press Enter (13) or Space (32)\n        if (event.keyCode === 13 || event.keyCode === 32) {\n            event.preventDefault();\n            this.changeMuteState();\n        }\n    }\n\n    changeMuteState() {\n        let volume = this.getVolume();\n\n        if (volume === 0) {\n            this.target.volume = this.currentVolume;\n        }\n        else {\n            this.currentVolume = volume;\n            this.target.volume = 0;\n        }\n    }\n\n    getVolume() {\n        const volume = this.target ? this.target.volume : 0;\n        this.ariaValue = volume ? 'unmuted' : 'muted';\n        return volume;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { VgAPI } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'vg-volume',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div\n            #volumeBar\n            class=\"volumeBar\"\n            tabindex=\"0\"\n            role=\"slider\"\n            aria-label=\"volume level\"\n            aria-level=\"polite\"\n            [attr.aria-valuenow]=\"ariaValue\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            [attr.aria-valuetext]=\"ariaValue + '%'\"\n            (click)=\"onClick($event)\"\n            (mousedown)=\"onMouseDown($event)\">\n            <div class=\"volumeBackground\" [ngClass]=\"{dragging: isDragging}\">\n                <div class=\"volumeValue\" [style.width]=\"(getVolume() * (100-15)) + '%'\"></div>\n                <div class=\"volumeKnob\" [style.left]=\"(getVolume() * (100-15)) + '%'\"></div>\n            </div>\n        </div>\n    `,\n    styles: [ `\n        vg-volume {\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            height: 50px;\n            width: 100px;\n            cursor: pointer;\n            color: white;\n            line-height: 50px;\n        }\n\n        vg-volume .volumeBar {\n            position: relative;\n            display: flex;\n            flex-grow: 1;\n            align-items: center;\n        }\n\n        vg-volume .volumeBackground {\n            display: flex;\n            flex-grow: 1;\n            height: 5px;\n            pointer-events: none;\n            background-color: #333;\n        }\n\n        vg-volume .volumeValue {\n            display: flex;\n            height: 5px;\n            pointer-events: none;\n            background-color: #FFF;\n            transition: all 0.2s ease-out;\n        }\n\n        vg-volume .volumeKnob {\n            position: absolute;\n            width: 15px;\n            height: 15px;\n            left: 0;\n            top: 50%;\n            transform: translateY(-50%);\n            border-radius: 15px;\n            pointer-events: none;\n            background-color: #FFF;\n            transition: all 0.2s ease-out;\n        }\n\n        vg-volume .volumeBackground.dragging .volumeValue,\n        vg-volume .volumeBackground.dragging .volumeKnob {\n            transition: none;\n        }\n    ` ]\n})\nexport class VgVolume implements OnInit, OnDestroy {\n    @Input() vgFor: string;\n    @ViewChild('volumeBar') volumeBarRef: ElementRef;\n\n    elem: HTMLElement;\n    target: any;\n    isDragging: boolean;\n    mouseDownPosX: number;\n    ariaValue: number;\n\n    subscriptions: Subscription[] = [];\n\n    constructor(ref: ElementRef, public API: VgAPI) {\n        this.elem = ref.nativeElement;\n        this.isDragging = false;\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n        this.ariaValue = this.getVolume() * 100;\n    }\n\n    onClick(event: { clientX: number }) {\n        this.setVolume(this.calculateVolume(event.clientX));\n    }\n\n    onMouseDown(event: { clientX: number }) {\n        this.mouseDownPosX = event.clientX;\n        this.isDragging = true;\n    }\n\n    @HostListener('document:mousemove', [ '$event' ])\n    onDrag(event: { clientX: number }) {\n        if (this.isDragging) {\n            this.setVolume(this.calculateVolume(event.clientX));\n        }\n    }\n\n    @HostListener('document:mouseup', [ '$event' ])\n    onStopDrag(event: { clientX: number }) {\n        if (this.isDragging) {\n            this.isDragging = false;\n            if (this.mouseDownPosX === event.clientX) {\n                this.setVolume(this.calculateVolume(event.clientX));\n            }\n        }\n    }\n\n    @HostListener('keydown', [ '$event' ])\n    arrowAdjustVolume(event: KeyboardEvent) {\n        if (event.keyCode === 38 || event.keyCode === 39) {\n            event.preventDefault();\n            this.setVolume(Math.max(0, Math.min(100, (this.getVolume() * 100) + 10)));\n        }\n        else if (event.keyCode === 37 || event.keyCode === 40) {\n            event.preventDefault();\n            this.setVolume(Math.max(0, Math.min(100, (this.getVolume() * 100) - 10)));\n        }\n    }\n\n    calculateVolume(mousePosX: number) {\n        const recObj = this.volumeBarRef.nativeElement.getBoundingClientRect();\n        const volumeBarOffsetLeft: number = recObj.left;\n        const volumeBarWidth: number = recObj.width;\n        return (mousePosX - volumeBarOffsetLeft) / volumeBarWidth * 100;\n    }\n\n    setVolume(vol: number) {\n        this.target.volume = Math.max(0, Math.min(1, vol / 100));\n        this.ariaValue = this.target.volume * 100;\n    }\n\n    getVolume(): number {\n        return this.target ? this.target.volume : 0;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { Component, ElementRef, HostListener, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { VgAPI, VgStates } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'vg-play-pause',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div class=\"icon\"\n             [class.vg-icon-pause]=\"getState() === 'playing'\"\n             [class.vg-icon-play_arrow]=\"getState() === 'paused' || getState() === 'ended'\"\n             tabindex=\"0\"\n             role=\"button\"\n             aria-label=\"play pause button\"\n             [attr.aria-valuetext]=\"ariaValue\">\n        </div>`,\n    styles: [ `\n        vg-play-pause {\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -khtml-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            height: 50px;\n            width: 50px;\n            cursor: pointer;\n            color: white;\n            line-height: 50px;\n        }\n\n        vg-play-pause .icon {\n            pointer-events: none;\n        }\n    ` ]\n})\nexport class VgPlayPause implements OnInit, OnDestroy {\n    @Input() vgFor: string;\n\n    elem: HTMLElement;\n    target: any;\n\n    subscriptions: Subscription[] = [];\n\n    ariaValue = VgStates.VG_PAUSED;\n\n    constructor(ref: ElementRef, public API: VgAPI) {\n        this.elem = ref.nativeElement;\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n    }\n\n    @HostListener('click')\n    onClick() {\n        this.playPause();\n    }\n\n    @HostListener('keydown', [ '$event' ])\n    onKeyDown(event: KeyboardEvent) {\n        // On press Enter (13) or Space (32)\n        if (event.keyCode === 13 || event.keyCode === 32) {\n            event.preventDefault();\n            this.playPause();\n        }\n    }\n\n    playPause() {\n        let state = this.getState();\n\n        switch (state) {\n            case VgStates.VG_PLAYING:\n                this.target.pause();\n                break;\n\n            case VgStates.VG_PAUSED:\n            case VgStates.VG_ENDED:\n                this.target.play();\n                break;\n        }\n    }\n\n    getState() {\n        this.ariaValue = this.target ? this.target.state : VgStates.VG_PAUSED;\n        return this.ariaValue;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { Component, Input, ElementRef, HostListener, OnInit, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport { VgAPI } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'vg-playback-button',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n    <span class=\"button\"\n          tabindex=\"0\"\n          role=\"button\"\n          aria-label=\"playback speed button\"\n          [attr.aria-valuetext]=\"ariaValue\">\n        {{getPlaybackRate()}}x\n    </span>`,\n    styles: [ `\n        vg-playback-button {\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            height: 50px;\n            width: 50px;\n            cursor: pointer;\n            color: white;\n            line-height: 50px;\n            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\n        }\n\n        vg-playback-button .button {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            width: 50px;\n        }\n    ` ]\n})\nexport class VgPlaybackButton implements OnInit, OnDestroy {\n    @Input() vgFor: string;\n\n    elem: HTMLElement;\n    target: any;\n\n    @Input() playbackValues: Array<string>;\n    playbackIndex: number;\n\n    subscriptions: Subscription[] = [];\n\n    ariaValue = 1;\n\n    constructor(ref: ElementRef, public API: VgAPI) {\n        this.elem = ref.nativeElement;\n        this.playbackValues = [ '0.5', '1.0', '1.5', '2.0' ];\n        this.playbackIndex = 1;\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n    }\n\n    @HostListener('click')\n    onClick() {\n        this.updatePlaybackSpeed();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        // On press Enter (13) or Space (32)\n        if (event.keyCode === 13 || event.keyCode === 32) {\n            event.preventDefault();\n            this.updatePlaybackSpeed();\n        }\n    }\n\n    updatePlaybackSpeed() {\n        this.playbackIndex = ++this.playbackIndex % this.playbackValues.length;\n\n        if (this.target instanceof VgAPI) {\n            this.target.playbackRate = (this.playbackValues[ this.playbackIndex ]);\n        }\n        else {\n            this.target.playbackRate[ this.vgFor ] = (this.playbackValues[ this.playbackIndex ]);\n        }\n    }\n\n    getPlaybackRate() {\n        this.ariaValue = this.target ? this.target.playbackRate : 1.0;\n        return this.ariaValue;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport { VgAPI, VgControlsHidden, VgStates } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'vg-scrub-bar',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div class=\"scrubBar\"\n             tabindex=\"0\"\n             role=\"slider\"\n             aria-label=\"scrub bar\"\n             aria-level=\"polite\"\n             [attr.aria-valuenow]=\"getPercentage()\"\n             aria-valuemin=\"0\"\n             aria-valuemax=\"100\"\n             [attr.aria-valuetext]=\"getPercentage() + '%'\">\n            <ng-content></ng-content>\n        </div>\n\n    `,\n    styles: [ `\n        vg-scrub-bar {\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            position: absolute;\n            width: 100%;\n            height: 5px;\n            bottom: 50px;\n            margin: 0;\n            cursor: pointer;\n            align-items: center;\n            background: rgba(0, 0, 0, 0.75);\n            z-index: 250;\n            -webkit-transition: bottom 1s, opacity 0.5s;\n            -khtml-transition: bottom 1s, opacity 0.5s;\n            -moz-transition: bottom 1s, opacity 0.5s;\n            -ms-transition: bottom 1s, opacity 0.5s;\n            transition: bottom 1s, opacity 0.5s;\n        }\n\n        vg-scrub-bar .scrubBar {\n            position: relative;\n            display: flex;\n            flex-grow: 1;\n            align-items: center;\n            height: 100%;\n        }\n\n        vg-controls vg-scrub-bar {\n            position: relative;\n            bottom: 0;\n            background: transparent;\n            height: 50px;\n            flex-grow: 1;\n            flex-basis: 0;\n            margin: 0 10px;\n            -webkit-transition: initial;\n            -khtml-transition: initial;\n            -moz-transition: initial;\n            -ms-transition: initial;\n            transition: initial;\n        }\n\n        vg-scrub-bar.hide {\n            bottom: 0;\n            opacity: 0;\n        }\n\n        vg-controls vg-scrub-bar.hide {\n            bottom: initial;\n            opacity: initial;\n        }\n    ` ]\n})\nexport class VgScrubBar implements OnInit, OnDestroy {\n    @HostBinding('class.hide') hideScrubBar: boolean = false;\n\n    @Input() vgFor: string;\n    @Input() vgSlider: boolean = true;\n\n    elem: HTMLElement;\n    target: any;\n    isSeeking: boolean = false;\n    wasPlaying: boolean = false;\n\n    subscriptions: Subscription[] = [];\n\n    constructor(ref: ElementRef, public API: VgAPI, vgControlsHiddenState: VgControlsHidden) {\n        this.elem = ref.nativeElement;\n        this.subscriptions.push(vgControlsHiddenState.isHidden.subscribe(hide => this.onHideScrubBar(hide)));\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n    }\n\n    protected seekStart() {\n        if (this.target.canPlay) {\n            this.isSeeking = true;\n            if (this.target.state === VgStates.VG_PLAYING) {\n                this.wasPlaying = true;\n            }\n            this.target.pause();\n        }\n    }\n\n    protected seekMove(offset: number) {\n        if (this.isSeeking) {\n            let percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);\n            this.target.time.current = percentage * this.target.time.total / 100;\n            this.target.seekTime(percentage, true);\n        }\n    }\n\n    protected seekEnd(offset: number) {\n        this.isSeeking = false;\n        if (this.target.canPlay) {\n            let percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);\n            this.target.seekTime(percentage, true);\n            if (this.wasPlaying) {\n                this.wasPlaying = false;\n                this.target.play();\n            }\n        }\n    }\n\n    protected touchEnd() {\n        this.isSeeking = false;\n        if (this.wasPlaying) {\n            this.wasPlaying = false;\n            this.target.play();\n        }\n    }\n\n    protected getTouchOffset(event: any) {\n        let offsetLeft: number = 0;\n        let element: any = event.target;\n        while (element) {\n            offsetLeft += element.offsetLeft;\n            element = element.offsetParent;\n        }\n        return event.touches[ 0 ].pageX - offsetLeft;\n    }\n\n    @HostListener('mousedown', [ '$event' ])\n    onMouseDownScrubBar($event: any) {\n        if (!this.target.isLive) {\n            if (!this.vgSlider) {\n                this.seekEnd($event.offsetX);\n            }\n            else {\n                this.seekStart();\n            }\n        }\n    }\n\n    @HostListener('mousemove', [ '$event' ])\n    onMouseMoveScrubBar($event: any) {\n        if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n            this.seekMove($event.offsetX);\n        }\n    }\n\n    @HostListener('mouseout', [ '$event' ])\n    onMouseOutScrubBar($event: any) {\n        if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n            this.seekEnd($event.offsetX);\n        }\n    }\n\n    @HostListener('mouseup', [ '$event' ])\n    onMouseUpScrubBar($event: any) {\n        if (!this.target.isLive && this.vgSlider) {\n            this.seekEnd($event.offsetX);\n        }\n    }\n\n    @HostListener('touchstart', [ '$event' ])\n    onTouchStartScrubBar($event: any) {\n        if (!this.target.isLive) {\n            if (!this.vgSlider) {\n                this.seekEnd(this.getTouchOffset($event));\n            }\n            else {\n                this.seekStart();\n            }\n        }\n    }\n\n    @HostListener('touchmove', [ '$event' ])\n    onTouchMoveScrubBar($event: any) {\n        if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n            this.seekMove(this.getTouchOffset($event));\n        }\n    }\n\n    @HostListener('touchcancel', [ '$event' ])\n    onTouchCancelScrubBar($event: any) {\n        if (!this.target.isLive && this.vgSlider) {\n            this.touchEnd();\n        }\n    }\n\n    @HostListener('touchend', [ '$event' ])\n    onTouchEndScrubBar($event: any) {\n        if (!this.target.isLive && this.vgSlider) {\n            this.touchEnd();\n        }\n    }\n\n    @HostListener('touchleave', [ '$event' ])\n    onTouchLeaveScrubBar($event: any) {\n        if (!this.target.isLive && this.vgSlider) {\n            this.touchEnd();\n        }\n    }\n\n    @HostListener('keydown', [ '$event' ])\n    arrowAdjustVolume(event: KeyboardEvent) {\n        if (event.keyCode === 38 || event.keyCode === 39) {\n            event.preventDefault();\n            this.target.seekTime((this.target.time.current + 5000) / 1000, false);\n        }\n        else if (event.keyCode === 37 || event.keyCode === 40) {\n            event.preventDefault();\n            this.target.seekTime((this.target.time.current - 5000) / 1000, false);\n        }\n    }\n\n    getPercentage() {\n        return this.target ? ((this.target.time.current * 100) / this.target.time.total) + '%' : '0%';\n    }\n\n    onHideScrubBar(hide: boolean) {\n        this.hideScrubBar = hide;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { Component, ElementRef, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { VgAPI } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'vg-scrub-bar-buffering-time',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div class=\"background\" [style.width]=\"getBufferTime()\"></div>`,\n    styles: [ `\n        vg-scrub-bar-buffering-time {\n            display: flex;\n            width: 100%;\n            height: 5px;\n            pointer-events: none;\n            position: absolute;\n        }\n\n        vg-scrub-bar-buffering-time .background {\n            background-color: rgba(255, 255, 255, 0.3);\n        }\n\n        vg-controls vg-scrub-bar-buffering-time {\n            position: absolute;\n            top: calc(50% - 3px);\n        }\n\n        vg-controls vg-scrub-bar-buffering-time .background {\n            -webkit-border-radius: 2px;\n            -moz-border-radius: 2px;\n            border-radius: 2px;\n        }\n    ` ]\n})\nexport class VgScrubBarBufferingTime implements OnInit, OnDestroy {\n    @Input() vgFor: string;\n\n    elem: HTMLElement;\n    target: any;\n\n    subscriptions: Subscription[] = [];\n\n    constructor(ref: ElementRef, public API: VgAPI) {\n        this.elem = ref.nativeElement;\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n    }\n\n    getBufferTime() {\n        let bufferTime = \"0%\";\n\n        if (this.target && this.target.buffer && this.target.buffered.length) {\n            if (this.target.time.total === 0) {\n                bufferTime = '0%';\n            }\n            else {\n                bufferTime = ((this.target.buffer.end / this.target.time.total) * 100) + '%';\n            }\n        }\n\n        return bufferTime;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChange,\n    ViewEncapsulation\n} from '@angular/core';\nimport { VgAPI } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'vg-scrub-bar-cue-points',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div class=\"cue-point-container\">\n            <span *ngFor=\"let cp of cuePoints\" [style.width]=\"cp.$$style?.width\" [style.left]=\"cp.$$style?.left\"\n                  class=\"cue-point\"></span>\n        </div>\n    `,\n    styles: [ `\n        vg-scrub-bar-cue-points {\n            display: flex;\n            width: 100%;\n            height: 5px;\n            pointer-events: none;\n            position: absolute;\n        }\n\n        vg-scrub-bar-cue-points .cue-point-container .cue-point {\n            position: absolute;\n            height: 5px;\n            background-color: rgba(255, 204, 0, 0.7);\n        }\n\n        vg-controls vg-scrub-bar-cue-points {\n            position: absolute;\n            top: calc(50% - 3px);\n        }\n    ` ]\n})\nexport class VgScrubBarCuePoints implements OnInit, OnChanges, OnDestroy {\n    @Input() vgCuePoints: TextTrackCueList;\n    @Input() vgFor: string;\n\n    elem: HTMLElement;\n    target: any;\n    onLoadedMetadataCalled: boolean = false;\n    cuePoints: Array<any> = [];\n\n    subscriptions: Subscription[] = [];\n\n    totalCues = 0;\n\n    constructor(ref: ElementRef, public API: VgAPI) {\n        this.elem = ref.nativeElement;\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n\n        let onTimeUpdate = this.target.subscriptions.loadedMetadata;\n        this.subscriptions.push(onTimeUpdate.subscribe(this.onLoadedMetadata.bind(this)));\n\n        if (this.onLoadedMetadataCalled) {\n            this.onLoadedMetadata();\n        }\n    }\n\n    onLoadedMetadata() {\n        if (this.vgCuePoints) {\n            // We need to transform the TextTrackCueList to Array or it doesn't work on IE11/Edge.\n            // See: https://github.com/videogular/videogular2/issues/369\n            this.cuePoints = [];\n\n            for (let i = 0, l = this.vgCuePoints.length; i < l; i++) {\n                let end = (this.vgCuePoints[ i ].endTime >= 0) ? this.vgCuePoints[ i ].endTime : this.vgCuePoints[ i ].startTime + 1;\n                let cuePointDuration = (end - this.vgCuePoints[ i ].startTime) * 1000;\n                let position = '0';\n                let percentWidth = '0';\n\n                if (typeof cuePointDuration === 'number' && this.target.time.total) {\n                    percentWidth = ((cuePointDuration * 100) / this.target.time.total) + \"%\";\n                    position = (this.vgCuePoints[ i ].startTime * 100 / (Math.round(this.target.time.total / 1000))) + \"%\";\n                }\n\n                (<any>this.vgCuePoints[ i ]).$$style = {\n                    width: percentWidth,\n                    left: position\n                };\n\n                this.cuePoints.push(this.vgCuePoints[ i ]);\n            }\n        }\n    }\n\n    updateCuePoints() {\n        if (!this.target) {\n            this.onLoadedMetadataCalled = true;\n            return;\n        }\n        this.onLoadedMetadata();\n    }\n\n    ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        if (changes[ 'vgCuePoints' ].currentValue) {\n            this.updateCuePoints();\n        }\n    }\n\n    ngDoCheck() {\n        if (this.vgCuePoints) {\n            const changes = this.totalCues !== this.vgCuePoints.length;\n\n            if (changes) {\n                this.totalCues = this.vgCuePoints.length;\n                this.updateCuePoints();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { Component, ElementRef, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { VgAPI } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'vg-scrub-bar-current-time',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div class=\"background\" [style.width]=\"getPercentage()\"></div><span class=\"slider\" *ngIf=\"vgSlider\"></span>`,\n    styles: [ `\n        vg-scrub-bar-current-time {\n            display: flex;\n            width: 100%;\n            height: 5px;\n            pointer-events: none;\n            position: absolute;\n        }\n\n        vg-scrub-bar-current-time .background {\n            background-color: white;\n        }\n\n        vg-controls vg-scrub-bar-current-time {\n            position: absolute;\n            top: calc(50% - 3px);\n            -webkit-border-radius: 2px;\n            -moz-border-radius: 2px;\n            border-radius: 2px;\n        }\n\n        vg-controls vg-scrub-bar-current-time .background {\n            border: 1px solid white;\n            -webkit-border-radius: 2px;\n            -moz-border-radius: 2px;\n            border-radius: 2px;\n        }\n\n        vg-scrub-bar-current-time .slider {\n            background: white;\n            height: 15px;\n            width: 15px;\n            border-radius: 50%;\n            box-shadow: 0px 0px 10px black;\n            margin-top: -5px;\n            margin-left: -10px;\n        }\n    ` ]\n})\nexport class VgScrubBarCurrentTime implements OnInit, OnDestroy {\n    @Input() vgFor: string;\n    @Input() vgSlider: boolean = false;\n\n    elem: HTMLElement;\n    target: any;\n\n    subscriptions: Subscription[] = [];\n\n    constructor(ref: ElementRef, public API: VgAPI) {\n        this.elem = ref.nativeElement;\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n    }\n\n    getPercentage() {\n        return this.target ? ((this.target.time.current * 100) / this.target.time.total) + '%' : '0%';\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { Component, ElementRef, Input, OnDestroy, OnInit, Pipe, PipeTransform, ViewEncapsulation } from '@angular/core';\nimport { VgAPI } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\n// Workaround until we can use UTC with Angular Date Pipe\n@Pipe({ name: 'vgUtc' })\nexport class VgUtcPipe implements PipeTransform {\n    transform(value: number, format: string): string {\n        let date = new Date(value);\n        let result = format;\n        let ss: string | number = date.getUTCSeconds();\n        let mm: string | number = date.getUTCMinutes();\n        let hh: string | number = date.getUTCHours();\n\n        if (ss < 10) {\n            ss = '0' + ss;\n        }\n        if (mm < 10) {\n            mm = '0' + mm;\n        }\n        if (hh < 10) {\n            hh = '0' + hh;\n        }\n\n        result = result.replace(/ss/g, <string>ss);\n        result = result.replace(/mm/g, <string>mm);\n        result = result.replace(/hh/g, <string>hh);\n\n        return result;\n    }\n}\n\n@Component({\n    selector: 'vg-time-display',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <span *ngIf=\"target?.isLive\">LIVE</span>\n        <span *ngIf=\"!target?.isLive\">{{ getTime() | vgUtc:vgFormat }}</span>\n        <ng-content></ng-content>\n    `,\n    styles: [ `\n        vg-time-display {\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            height: 50px;\n            width: 60px;\n            cursor: pointer;\n            color: white;\n            line-height: 50px;\n            pointer-events: none;\n            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\n        }\n    ` ]\n})\nexport class VgTimeDisplay implements OnInit, OnDestroy {\n    @Input() vgFor: string;\n    @Input() vgProperty: string = 'current';\n    @Input() vgFormat: string = 'mm:ss';\n\n    elem: HTMLElement;\n    target: any;\n\n    subscriptions: Subscription[] = [];\n\n    constructor(ref: ElementRef, public API: VgAPI) {\n        this.elem = ref.nativeElement;\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n    }\n\n    getTime() {\n        let t = 0;\n\n        if (this.target) {\n            t = Math.round(this.target.time[ this.vgProperty ]);\n            t = isNaN(t) || this.target.isLive ? 0 : t;\n        }\n\n        return t;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { Component, ElementRef, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { VgAPI } from '@videogular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\nexport interface Option {\n    id: string;\n    label: string;\n    selected: boolean;\n}\n\n@Component({\n    selector: 'vg-track-selector',\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div class=\"container\">\n            <div class=\"track-selected\"\n                 [class.vg-icon-closed_caption]=\"!trackSelected\">\n                {{ trackSelected || '' }}\n            </div>\n\n            <select class=\"trackSelector\"\n                    (change)=\"selectTrack($event.target.value)\"\n                    tabindex=\"0\"\n                    aria-label=\"track selector\"\n                    [attr.aria-valuetext]=\"ariaValue\">\n                <option\n                    *ngFor=\"let track of tracks\"\n                    [value]=\"track.id\"\n                    [selected]=\"track.selected === true\">\n                    {{ track.label }}\n                </option>\n            </select>\n        </div>\n    `,\n    styles: [ `\n        vg-track-selector {\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            width: 50px;\n            height: 50px;\n            cursor: pointer;\n            color: white;\n            line-height: 50px;\n        }\n\n        vg-track-selector .container {\n            position: relative;\n            display: flex;\n            flex-grow: 1;\n            align-items: center;\n\n            padding: 0;\n            margin: 5px;\n        }\n\n        vg-track-selector select.trackSelector {\n            width: 50px;\n            padding: 5px 8px;\n            border: none;\n            background: none;\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            appearance: none;\n            color: transparent;\n            font-size: 16px;\n        }\n\n        vg-track-selector .track-selected {\n            position: absolute;\n            width: 100%;\n            height: 50px;\n            top: -6px;\n            text-align: center;\n            text-transform: uppercase;\n            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\n            padding-top: 2px;\n            pointer-events: none;\n        }\n\n        vg-track-selector .vg-icon-closed_caption:before {\n            width: 100%;\n        }\n    ` ]\n})\nexport class VgTrackSelector implements OnInit, OnDestroy {\n    @Input() vgFor: string;\n\n    elem: HTMLElement;\n    target: any;\n    tracks: Array<Option>;\n    trackSelected: string;\n\n    subscriptions: Subscription[] = [];\n\n    ariaValue: string;\n\n    constructor(ref: ElementRef, public API: VgAPI) {\n        this.elem = ref.nativeElement;\n    }\n\n    ngOnInit() {\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n        }\n    }\n\n    onPlayerReady() {\n        this.target = this.API.getMediaById(this.vgFor);\n\n        const subs: Array<Option> = Array.from((this.API.getMasterMedia().elem as HTMLMediaElement).children)\n            .filter((item: HTMLElement) => item.tagName === 'TRACK')\n            .filter((item: HTMLTrackElement) => item.kind === 'subtitles')\n            .map((item: HTMLTrackElement) => ({\n                label: item.label,\n                selected: item.default === true,\n                id: item.srclang\n            }));\n\n        this.tracks = [\n            ...subs,\n            {\n                id: null,\n                label: 'Off',\n                selected: subs.every((item: Option) => item.selected === false)\n            }\n        ];\n\n        const track: Option = this.tracks.filter((item: Option) => item.selected === true)[ 0 ];\n        this.trackSelected = track.id;\n        this.ariaValue = track.label;\n    }\n\n    selectTrack(trackId: string) {\n        this.trackSelected = (trackId === 'null') ? null : trackId;\n\n        this.ariaValue = 'No track selected';\n\n        Array.from((this.API.getMasterMedia().elem as HTMLMediaElement).textTracks)\n            .forEach((item: TextTrack) => {\n                if (item.language === trackId) {\n                    this.ariaValue = item.label;\n                    item.mode = 'showing';\n                } else {\n                    item.mode = 'hidden';\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { VgControls } from './vg-controls';\nimport { VgFullscreen } from './vg-fullscreen/vg-fullscreen';\nimport { VgMute } from './vg-mute/vg-mute';\nimport { VgVolume } from './vg-volume/vg-volume';\nimport { VgPlayPause } from './vg-play-pause/vg-play-pause';\nimport { VgPlaybackButton } from './vg-playback-button/vg-playback-button';\nimport { VgScrubBar } from './vg-scrub-bar/vg-scrub-bar';\nimport { VgScrubBarBufferingTime } from './vg-scrub-bar/vg-scrub-bar-buffering-time/vg-scrub-bar-buffering-time';\nimport { VgScrubBarCuePoints } from './vg-scrub-bar/vg-scrub-bar-cue-points/vg-scrub-bar-cue-points';\nimport { VgScrubBarCurrentTime } from './vg-scrub-bar/vg-scrub-bar-current-time/vg-scrub-bar-current-time';\nimport { VgTimeDisplay, VgUtcPipe } from './vg-time-display/vg-time-display';\nimport { VgTrackSelector } from './vg-track-selector/vg-track-selector';\nimport { VgAPI, VgControlsHidden } from '@videogular/core';\n\n@NgModule({\n    imports: [ CommonModule ],\n    declarations: [\n        VgControls,\n        VgFullscreen,\n        VgMute,\n        VgVolume,\n        VgPlayPause,\n        VgPlaybackButton,\n        VgScrubBar,\n        VgScrubBarBufferingTime,\n        VgScrubBarCuePoints,\n        VgScrubBarCurrentTime,\n        VgTimeDisplay,\n        VgUtcPipe,\n        VgTrackSelector\n    ],\n    exports: [\n        VgControls,\n        VgFullscreen,\n        VgMute,\n        VgVolume,\n        VgPlayPause,\n        VgPlaybackButton,\n        VgScrubBar,\n        VgScrubBarBufferingTime,\n        VgScrubBarCuePoints,\n        VgScrubBarCurrentTime,\n        VgTimeDisplay,\n        VgUtcPipe,\n        VgTrackSelector\n    ],\n    providers: [ VgAPI, VgControlsHidden ]\n})\nexport class VgControlsModule {\n}\n"],"names":["tryCatcher","tryCatchTarget","apply","this","arguments","e","errorObject_1","errorObject","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError_1","UnsubscriptionError","pipeFromArray","fns","length","input","prev","fn","noop_1","noop","VgStates","VG_ENDED","VG_PAUSED","VG_PLAYING","VG_LOADING","__decorate","Injectable","VgAPI","medias","playerReadyEvent","EventEmitter","isPlayerReady","prototype","onPlayerReady","fsAPI","emit","getDefaultMedia","item","getMasterMedia","master","id","vgMedia","isMasterDefined","result","getMediaById","media","play","pause","Object","defineProperty","get","$$getAllProperties","set","seconds","$$setAllProperties","state","volume","rate","seekTime","value","byPercent","$$seek","second","duration","currentTime","addTextTrack","type","label","language","$$addTextTrack","property","keys","current","total","left","registerElement","elem","videogularElement","registerMedia","unregisterMedia","VgUtils","getZIndex","elementZIndex","zIndex","tags","document","getElementsByTagName","i","l","parseInt","window","getComputedStyle","isMobileDevice","orientation","navigator","userAgent","indexOf","isiOSDevice","match","isCordova","URL","VgFullscreenAPI","nativeFullscreen","isFullscreen","onChangeFullscreen","init","_this","APIs","w3","enabled","element","request","exit","onchange","onerror","newWebkit","oldWebkit","moz","ios","ms","browser","polyfill","isAvailable","fsElemDispatcher","toArray","fsChangeSubscription","Observable","fromEvent","subscribe","onFullscreenChange","next","toggleFullscreen","enterElementInFullScreen","Array","isArray","x","val","isArray_1","parseFloat","__window","__self","self","WorkerGlobalScope","_root","global","root_1","Error","_super","call","map","toString","join","name","stack","message","__extends","Subscription","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","isFunction_1","isFunction","trial","tryCatch_1","tryCatch","sub","isObject_1","isObject","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","empty","error","complete","Symbol","root","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","create","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","_i","Observable$$1","_isScalar","_subscribe","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","Action","scheduler","work","schedule","delay","AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","undefined","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","now","Date","AsyncScheduler","active","scheduled","action","shift","Scheduler_1","AsyncAction_1","isNaN","TimerObservable_2","TimerObservable","dueTime","period","isNumeric_1","isNumeric","Number","isScheduler_1","isScheduler","async_1","async","isDate_1","isDate","initialDelay","dispatch","Observable_1","VgEvents","VG_ABORT","VG_CAN_PLAY","VG_CAN_PLAY_THROUGH","VG_DURATION_CHANGE","VG_EMPTIED","VG_ENCRYPTED","VG_ERROR","VG_LOADED_DATA","VG_LOADED_METADATA","VG_LOAD_START","VG_PAUSE","VG_PLAY","VG_PROGRESS","VG_RATE_CHANGE","VG_SEEK","VG_SEEKED","VG_SEEKING","VG_STALLED","VG_SUSPEND","VG_TIME_UPDATE","VG_VOLUME_CHANGE","VG_WAITING","VG_LOAD","VG_ENTER","VG_EXIT","VG_START_ADS","VG_END_ADS","VgMedia","api","ref","time","buffer","end","canPlay","canPlayThrough","isBufferDetected","isMetadataLoaded","isReadyToPlay","isWaiting","isCompleted","isLive","checkInterval","currentPlayPos","lastPlayPos","playAtferSync","bufferDetected","Subject","ngOnInit","nodeName","abort","durationChange","emptied","encrypted","ended","loadedData","loadedMetadata","loadStart","playing","progress","rateChange","seeked","seeking","stalled","suspend","timeUpdate","volumeChange","waiting","startAds","endAds","mutation","observer","domObs","MutationObserver","mutations","observe","childList","attributes","disconnect","mutationObs","onMutation","canPlayObs","onCanPlay","canPlayThroughObs","onCanPlayThrough","loadedMetadataObs","onLoadMetadata","waitingObs","onWait","progressObs","onProgress","endedObs","onComplete","playingObs","onStartPlaying","playObs","onPlay","pauseObs","onPause","timeUpdateObs","onTimeUpdate","volumeChangeObs","onVolumeChange","errorObs","onError","vgMaster","prepareSync","canPlayAll","canPlayAllSubscription","combineLatest","params","_b","some","event","target","readyState","syncSubscription","startSync","diff","mut","attributeName","loadMedia","removedNodes","toLowerCase","stopBufferCheck","setTimeout","load","playPromise","then","catch","playbackRate","buffered","textTracks","detectChanges","t","Math","round","Infinity","startBufferCheck","bufferCheck","offset","checkBufferSubscription","mode","newTrack","ngOnDestroy","src","Input","Directive","selector","__metadata","ChangeDetectorRef","VgControlsHidden","isHiddenSubject","isHidden","asObservable","hidden","VgPlayer","controlsHidden","isNativeFullscreen","areControlsHidden","onMediaReady","nativeElement","ngAfterContentInit","onHideControls","fsState","s","HostBinding","Output","ContentChildren","QueryList","Component","encapsulation","ViewEncapsulation","None","template","styles","providers","ElementRef","VgCuePoints","onEnterCuePoint","onUpdateCuePoint","onExitCuePoint","onCompleteCuePoint","cuesSubscriptions","totalCues","onLoad","cues","track","updateCuePoints","onEnter","onExit","ngDoCheck","CORE_DECLARATIONS","VgCoreModule","NgModule","imports","CommonModule","declarations","CustomEvent","bubbles","cancelable","detail","evt","createEvent","initCustomEvent","ɵa","VgControls","API","isAdsPlaying","hideControls","vgAutohide","vgAutohideTime","mouseMove","show","touchStart","vgFor","onStartAds","onEndAds","ngAfterViewInit","hide","clearTimeout","timer","hideAsync","ɵb","VgFullscreen","ariaValue","onClick","changeFullscreenState","onKeyDown","keyCode","preventDefault","HostListener","KeyboardEvent","ɵc","VgMute","currentVolume","changeMuteState","getVolume","ɵd","VgVolume","isDragging","setVolume","calculateVolume","clientX","onMouseDown","mouseDownPosX","onDrag","onStopDrag","arrowAdjustVolume","max","min","mousePosX","recObj","volumeBarRef","getBoundingClientRect","width","vol","ViewChild","ɵe","VgPlayPause","playPause","getState","ɵf","VgPlaybackButton","playbackValues","playbackIndex","updatePlaybackSpeed","getPlaybackRate","ɵg","VgScrubBar","vgControlsHiddenState","hideScrubBar","vgSlider","isSeeking","wasPlaying","onHideScrubBar","seekStart","seekMove","percentage","scrollWidth","seekEnd","touchEnd","getTouchOffset","offsetLeft","offsetParent","touches","pageX","onMouseDownScrubBar","$event","offsetX","onMouseMoveScrubBar","onMouseOutScrubBar","onMouseUpScrubBar","onTouchStartScrubBar","onTouchMoveScrubBar","onTouchCancelScrubBar","onTouchEndScrubBar","onTouchLeaveScrubBar","getPercentage","ɵh","VgScrubBarBufferingTime","getBufferTime","bufferTime","ɵi","VgScrubBarCuePoints","onLoadedMetadataCalled","cuePoints","onLoadedMetadata","vgCuePoints","cuePointDuration","endTime","startTime","position","percentWidth","$$style","ngOnChanges","changes","currentValue","TextTrackCueList","ɵj","VgScrubBarCurrentTime","ɵk","VgUtcPipe","transform","format","date","ss","getUTCSeconds","mm","getUTCMinutes","hh","getUTCHours","replace","Pipe","ɵl","VgTimeDisplay","vgProperty","vgFormat","getTime","ɵm","VgTrackSelector","subs","from","children","filter","tagName","kind","selected","default","srclang","tracks","every","trackSelected","selectTrack","trackId","VgControlsModule"],"mappings":"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"}
